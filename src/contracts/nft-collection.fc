;; AudioTon NFT Collection Contract
;; TEP-62 compliant NFT collection for music tracks and memorabilia

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

const int ERROR_NOT_OWNER = 100;
const int ERROR_INSUFFICIENT_FUNDS = 101;

;; Storage format:
;; owner_address:MsgAddress next_item_index:uint64 content:^Cell nft_item_code:^Cell royalty_params:^Cell

(slice, int, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_msg_addr(),  ;; owner_address
    ds~load_uint(64),    ;; next_item_index
    ds~load_ref(),       ;; content
    ds~load_ref(),       ;; nft_item_code
    ds~load_ref()        ;; royalty_params
  );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell()
    .store_uint(item_index, 64)
    .store_slice(my_address())
    .end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
    .store_int(wc, 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(nft_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1);
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }
  
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();
  
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
  
  (slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) = load_data();
  
  if (op == 1) { ;; mint NFT
    throw_unless(ERROR_NOT_OWNER, equal_slices(sender_address, owner_address));
    
    int item_index = in_msg_body~load_uint(64);
    slice item_owner_address = in_msg_body~load_msg_addr();
    cell item_content = in_msg_body~load_ref();
    int amount = in_msg_body~load_coins();
    
    throw_unless(ERROR_INSUFFICIENT_FUNDS, amount >= 50000000); ;; at least 0.05 TON
    
    deploy_nft_item(item_index, nft_item_code, amount, begin_cell()
      .store_slice(item_owner_address)
      .store_ref(item_content)
      .end_cell());
    
    save_data(owner_address, next_item_index + 1, content, nft_item_code, royalty_params);
    return ();
  }
  
  if (op == 2) { ;; batch mint
    throw_unless(ERROR_NOT_OWNER, equal_slices(sender_address, owner_address));
    
    cell items_dict = in_msg_body~load_dict();
    int total_items = in_msg_body~load_uint(16);
    
    int i = 0;
    while (i < total_items) {
      (slice item_data, int success) = items_dict.udict_get?(16, i);
      if (success) {
        int item_index = item_data~load_uint(64);
        slice item_owner = item_data~load_msg_addr();
        cell item_content = item_data~load_ref();
        int amount = item_data~load_coins();
        
        deploy_nft_item(item_index, nft_item_code, amount, begin_cell()
          .store_slice(item_owner)
          .store_ref(item_content)
          .end_cell());
      }
      i += 1;
    }
    
    save_data(owner_address, next_item_index + total_items, content, nft_item_code, royalty_params);
    return ();
  }
  
  if (op == 3) { ;; change owner
    throw_unless(ERROR_NOT_OWNER, equal_slices(sender_address, owner_address));
    slice new_owner = in_msg_body~load_msg_addr();
    save_data(new_owner, next_item_index, content, nft_item_code, royalty_params);
    return ();
  }
  
  throw(0xffff); ;; unknown operation
}

;; Get methods
(int, cell, slice) get_collection_data() method_id {
  (slice owner, int next_item_index, cell content, _, _) = load_data();
  return (next_item_index, content, owner);
}

slice get_nft_address_by_index(int index) method_id {
  (_, _, _, cell nft_item_code, _) = load_data();
  cell state_init = calculate_nft_item_state_init(index, nft_item_code);
  return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
  (_, _, _, _, cell royalty_params) = load_data();
  slice ds = royalty_params.begin_parse();
  return (ds~load_uint(16), ds~load_uint(16), ds~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  (_, _, cell content, _, _) = load_data();
  return (begin_cell()
    .store_ref(content)
    .store_ref(individual_nft_content)
    .end_cell());
}