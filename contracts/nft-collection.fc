;; AudioTon NFT Collection Contract - Production Mainnet Version
;; TEP-62 compliant NFT collection for music tracks and memorabilia

#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";

;; Operation codes
const int op::mint_nft = 1;
const int op::batch_mint = 2;
const int op::change_owner = 3;

;; Error codes  
const int error::unauthorized = 401;
const int error::insufficient_funds = 402;
const int error::invalid_index = 403;

;; Storage structure:
;; owner_address:267 next_item_index:64 content:^Cell nft_item_code:^Cell royalty_params:^Cell

(slice, int, cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),  ;; owner address
        ds~load_uint(64),    ;; next item index
        ds~load_ref(),       ;; collection content
        ds~load_ref(),       ;; NFT item code
        ds~load_ref()        ;; royalty params
    );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) impure inline {
    set_data(
        begin_cell()
            .store_slice(owner_address)
            .store_uint(next_item_index, 64)
            .store_ref(content)
            .store_ref(nft_item_code)
            .store_ref(royalty_params)
            .end_cell()
    );
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) inline {
    cell data = begin_cell()
        .store_uint(item_index, 64)
        .store_slice(my_address())
        .end_cell();
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(nft_item_code)
        .store_dict(data)
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(wc, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) {
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2);

    (slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) = load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::mint_nft) {
        throw_unless(error::unauthorized, equal_slices(sender_address, owner_address));
        int item_index = in_msg_body~load_uint(64);
        throw_unless(error::invalid_index, item_index >= next_item_index);
        
        slice item_owner_address = in_msg_body~load_msg_addr();
        cell item_content = in_msg_body~load_ref();
        int amount = in_msg_body~load_coins();
        
        throw_unless(error::insufficient_funds, msg_value >= amount + fwd_fee);
        
        deploy_nft_item(item_index, nft_item_code, amount, item_content);
        
        ;; Update next item index if this was the next sequential item
        if (item_index == next_item_index) {
            save_data(owner_address, next_item_index + 1, content, nft_item_code, royalty_params);
        }
        return ();
    }

    if (op == op::batch_mint) {
        throw_unless(error::unauthorized, equal_slices(sender_address, owner_address));
        
        int batch_size = in_msg_body~load_uint(8);
        int total_cost = 0;
        
        repeat (batch_size) {
            int item_index = in_msg_body~load_uint(64);
            slice item_owner_address = in_msg_body~load_msg_addr();
            cell item_content = in_msg_body~load_ref();
            int amount = in_msg_body~load_coins();
            
            total_cost += amount;
            deploy_nft_item(item_index, nft_item_code, amount, item_content);
        }
        
        throw_unless(error::insufficient_funds, msg_value >= total_cost + fwd_fee);
        
        save_data(owner_address, next_item_index + batch_size, content, nft_item_code, royalty_params);
        return ();
    }

    if (op == op::change_owner) {
        throw_unless(error::unauthorized, equal_slices(sender_address, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, royalty_params);
        return ();
    }

    throw(0xffff);
}

;; Get methods
(int, cell, slice) get_collection_data() method_id {
    (slice owner_address, int next_item_index, cell content, _, _) = load_data();
    return (next_item_index, content, owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    (_, _, _, cell nft_item_code, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
    (_, _, _, _, cell royalty_params) = load_data();
    slice rs = royalty_params.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    (_, _, cell content, _, _) = load_data();
    return begin_cell()
        .store_ref(content)
        .store_ref(individual_nft_content)
        .end_cell();
}